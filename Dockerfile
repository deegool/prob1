# Use Debian as the base image
FROM debian:bullseye

# Set environment variables for non-interactive installation
ENV DEBIAN_FRONTEND=noninteractive

# Install essential packages, including gnupg for key management
RUN apt-get update && \
    apt-get install -y wget gnupg curl software-properties-common lsb-release && \
    rm -rf /var/lib/apt/lists/*

# Add MySQL GPG key directly from a keyserver
RUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys B7B3B788A8D3785C && \
    echo "deb https://repo.mysql.com/apt/debian bullseye mysql-8.0" > \
    /etc/apt/sources.list.d/mysql.list

# Add Varnish GPG key and repository
RUN wget -q -O - https://packagecloud.io/varnishcache/varnish60lts/gpgkey | \
    gpg --dearmor -o /usr/share/keyrings/varnish-archive-keyring.gpg && \
    echo "deb [arch=amd64 signed-by=/usr/share/keyrings/varnish-archive-keyring.gpg] https://packagecloud.io/varnishcache/varnish60lts/debian/ bullseye main" > \
    /etc/apt/sources.list.d/varnish.list

# Update package lists and install MySQL and Varnish
RUN apt-get update && \
    apt-get install -y mysql-server varnish && \
    rm -rf /var/lib/apt/lists/*

# Create necessary directories with correct permissions
RUN mkdir -p /var/lib/mysql /run/mysqld && \
    chown -R mysql:mysql /var/lib/mysql /run/mysqld

# Set environment variables for MySQL
ENV MYSQL_DATADIR=/var/lib/mysql

# Remove existing files from the data directory
RUN rm -rf /var/lib/mysql/* && \
    mysqld --initialize --datadir=/var/lib/mysql --user=mysql --log-error-verbosity=3

# Start MySQL in safe mode, extract temporary password, and configure root password
RUN mysqld_safe --datadir=/var/lib/mysql --socket=/run/mysqld/mysqld.sock & \
    sleep 20 && \
    # Extract the temporary password generated by MySQL
    TEMP_PASS=$(grep 'temporary password' /var/log/mysql/error.log | awk '{print $NF}') && \
    echo "Temporary password: $TEMP_PASS" && \
    # Use the temporary password to set a new password for root
    mysql --connect-expired-password --user=root --password="$TEMP_PASS" --protocol=socket --socket=/run/mysqld/mysqld.sock -e "ALTER USER 'root'@'localhost' IDENTIFIED BY 'password'; FLUSH PRIVILEGES;" && \
    killall mysqld_safe

# Copy entrypoint script if applicable
COPY entrypoint.sh /entrypoint.sh
RUN chmod +x /entrypoint.sh

# Expose MySQL and Varnish ports
EXPOSE 3306 6081

# Start MySQL and Varnish on container launch
CMD ["/entrypoint.sh"]
